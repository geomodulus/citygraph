// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.1
// source: citygraph.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies what kind of items should be piped from one type of query to
// another.
//
// Edge and vertex queries can build off of one another via pipes - e.g. you
// can get the outbound edges of a set of vertices by piping from a vertex
// query to an edge query. `EdgeDirection`s are used to specify which
// end of things you want to pipe - either the outbound items or the inbound
// items.
type EdgeDirection int32

const (
	EdgeDirection_OUTBOUND EdgeDirection = 0
	EdgeDirection_INBOUND  EdgeDirection = 1
)

// Enum value maps for EdgeDirection.
var (
	EdgeDirection_name = map[int32]string{
		0: "OUTBOUND",
		1: "INBOUND",
	}
	EdgeDirection_value = map[string]int32{
		"OUTBOUND": 0,
		"INBOUND":  1,
	}
)

func (x EdgeDirection) Enum() *EdgeDirection {
	p := new(EdgeDirection)
	*p = x
	return p
}

func (x EdgeDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EdgeDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_citygraph_proto_enumTypes[0].Descriptor()
}

func (EdgeDirection) Type() protoreflect.EnumType {
	return &file_citygraph_proto_enumTypes[0]
}

func (x EdgeDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EdgeDirection.Descriptor instead.
func (EdgeDirection) EnumDescriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{0}
}

// A UUID.
type Uuid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uuid) Reset() {
	*x = Uuid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uuid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uuid) ProtoMessage() {}

func (x *Uuid) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uuid.ProtoReflect.Descriptor instead.
func (*Uuid) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{0}
}

func (x *Uuid) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

/// A string that must be less than 256 characters long, and can only contain
/// letters, numbers, dashes and underscores. This is used for vertex and edge
/// types, as well as property names.
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{1}
}

func (x *Identifier) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// A JSON value.
type Json struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value string `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Json) Reset() {
	*x = Json{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Json) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Json) ProtoMessage() {}

func (x *Json) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Json.ProtoReflect.Descriptor instead.
func (*Json) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{2}
}

func (x *Json) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// An edge.
//
// Edges are how you would represent a verb or a relationship in the
// datastore. An example might be "liked" or "reviewed". Edges are typed and
// directed.
type Edge struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key to the edge.
	Key *EdgeKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// When the edge was created.
	CreatedDatetime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_datetime,json=createdDatetime,proto3" json:"created_datetime,omitempty"`
}

func (x *Edge) Reset() {
	*x = Edge{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Edge) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Edge) ProtoMessage() {}

func (x *Edge) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Edge.ProtoReflect.Descriptor instead.
func (*Edge) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{3}
}

func (x *Edge) GetKey() *EdgeKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Edge) GetCreatedDatetime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedDatetime
	}
	return nil
}

// Represents a uniquely identifiable key to an edge.
type EdgeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the outbound vertex.
	OutboundId *Uuid `protobuf:"bytes,1,opt,name=outbound_id,json=outboundId,proto3" json:"outbound_id,omitempty"`
	// The type of the edge.
	T *Identifier `protobuf:"bytes,2,opt,name=t,proto3" json:"t,omitempty"`
	// The id of the inbound vertex.
	InboundId *Uuid `protobuf:"bytes,3,opt,name=inbound_id,json=inboundId,proto3" json:"inbound_id,omitempty"`
}

func (x *EdgeKey) Reset() {
	*x = EdgeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeKey) ProtoMessage() {}

func (x *EdgeKey) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeKey.ProtoReflect.Descriptor instead.
func (*EdgeKey) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{4}
}

func (x *EdgeKey) GetOutboundId() *Uuid {
	if x != nil {
		return x.OutboundId
	}
	return nil
}

func (x *EdgeKey) GetT() *Identifier {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *EdgeKey) GetInboundId() *Uuid {
	if x != nil {
		return x.InboundId
	}
	return nil
}

// A vertex.
//
// Vertices are how you would represent nouns in the datastore. An example
// might be a user, or a movie. All vertices have a unique ID and a type.
type Vertex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the vertex.
	Id *Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of the vertex.
	T *Identifier `protobuf:"bytes,2,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *Vertex) Reset() {
	*x = Vertex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vertex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vertex) ProtoMessage() {}

func (x *Vertex) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vertex.ProtoReflect.Descriptor instead.
func (*Vertex) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{5}
}

func (x *Vertex) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *Vertex) GetT() *Identifier {
	if x != nil {
		return x.T
	}
	return nil
}

// A query for vertices.
type VertexQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*VertexQuery_Range
	//	*VertexQuery_Specific
	//	*VertexQuery_Pipe
	//	*VertexQuery_PropertyPresence
	//	*VertexQuery_PropertyValue
	//	*VertexQuery_PipePropertyPresence
	//	*VertexQuery_PipePropertyValue
	Query isVertexQuery_Query `protobuf_oneof:"query"`
}

func (x *VertexQuery) Reset() {
	*x = VertexQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertexQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertexQuery) ProtoMessage() {}

func (x *VertexQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertexQuery.ProtoReflect.Descriptor instead.
func (*VertexQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{6}
}

func (m *VertexQuery) GetQuery() isVertexQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *VertexQuery) GetRange() *RangeVertexQuery {
	if x, ok := x.GetQuery().(*VertexQuery_Range); ok {
		return x.Range
	}
	return nil
}

func (x *VertexQuery) GetSpecific() *SpecificVertexQuery {
	if x, ok := x.GetQuery().(*VertexQuery_Specific); ok {
		return x.Specific
	}
	return nil
}

func (x *VertexQuery) GetPipe() *PipeVertexQuery {
	if x, ok := x.GetQuery().(*VertexQuery_Pipe); ok {
		return x.Pipe
	}
	return nil
}

func (x *VertexQuery) GetPropertyPresence() *PropertyPresenceVertexQuery {
	if x, ok := x.GetQuery().(*VertexQuery_PropertyPresence); ok {
		return x.PropertyPresence
	}
	return nil
}

func (x *VertexQuery) GetPropertyValue() *PropertyValueVertexQuery {
	if x, ok := x.GetQuery().(*VertexQuery_PropertyValue); ok {
		return x.PropertyValue
	}
	return nil
}

func (x *VertexQuery) GetPipePropertyPresence() *PipePropertyPresenceVertexQuery {
	if x, ok := x.GetQuery().(*VertexQuery_PipePropertyPresence); ok {
		return x.PipePropertyPresence
	}
	return nil
}

func (x *VertexQuery) GetPipePropertyValue() *PipePropertyValueVertexQuery {
	if x, ok := x.GetQuery().(*VertexQuery_PipePropertyValue); ok {
		return x.PipePropertyValue
	}
	return nil
}

type isVertexQuery_Query interface {
	isVertexQuery_Query()
}

type VertexQuery_Range struct {
	Range *RangeVertexQuery `protobuf:"bytes,1,opt,name=range,proto3,oneof"`
}

type VertexQuery_Specific struct {
	Specific *SpecificVertexQuery `protobuf:"bytes,2,opt,name=specific,proto3,oneof"`
}

type VertexQuery_Pipe struct {
	Pipe *PipeVertexQuery `protobuf:"bytes,3,opt,name=pipe,proto3,oneof"`
}

type VertexQuery_PropertyPresence struct {
	PropertyPresence *PropertyPresenceVertexQuery `protobuf:"bytes,4,opt,name=property_presence,json=propertyPresence,proto3,oneof"`
}

type VertexQuery_PropertyValue struct {
	PropertyValue *PropertyValueVertexQuery `protobuf:"bytes,5,opt,name=property_value,json=propertyValue,proto3,oneof"`
}

type VertexQuery_PipePropertyPresence struct {
	PipePropertyPresence *PipePropertyPresenceVertexQuery `protobuf:"bytes,6,opt,name=pipe_property_presence,json=pipePropertyPresence,proto3,oneof"`
}

type VertexQuery_PipePropertyValue struct {
	PipePropertyValue *PipePropertyValueVertexQuery `protobuf:"bytes,7,opt,name=pipe_property_value,json=pipePropertyValue,proto3,oneof"`
}

func (*VertexQuery_Range) isVertexQuery_Query() {}

func (*VertexQuery_Specific) isVertexQuery_Query() {}

func (*VertexQuery_Pipe) isVertexQuery_Query() {}

func (*VertexQuery_PropertyPresence) isVertexQuery_Query() {}

func (*VertexQuery_PropertyValue) isVertexQuery_Query() {}

func (*VertexQuery_PipePropertyPresence) isVertexQuery_Query() {}

func (*VertexQuery_PipePropertyValue) isVertexQuery_Query() {}

// Gets a range of vertices.
type RangeVertexQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Limits the number of vertices to get.
	Limit uint32 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filters the type of vertices returned.
	T *Identifier `protobuf:"bytes,2,opt,name=t,proto3" json:"t,omitempty"`
	// Sets the lowest vertex ID to return.
	StartId *Uuid `protobuf:"bytes,3,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
}

func (x *RangeVertexQuery) Reset() {
	*x = RangeVertexQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangeVertexQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangeVertexQuery) ProtoMessage() {}

func (x *RangeVertexQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangeVertexQuery.ProtoReflect.Descriptor instead.
func (*RangeVertexQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{7}
}

func (x *RangeVertexQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *RangeVertexQuery) GetT() *Identifier {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *RangeVertexQuery) GetStartId() *Uuid {
	if x != nil {
		return x.StartId
	}
	return nil
}

// Gets a specific set of vertices.
type SpecificVertexQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IDs of the vertices to get.
	Ids []*Uuid `protobuf:"bytes,1,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *SpecificVertexQuery) Reset() {
	*x = SpecificVertexQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificVertexQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificVertexQuery) ProtoMessage() {}

func (x *SpecificVertexQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificVertexQuery.ProtoReflect.Descriptor instead.
func (*SpecificVertexQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{8}
}

func (x *SpecificVertexQuery) GetIds() []*Uuid {
	if x != nil {
		return x.Ids
	}
	return nil
}

// Gets the vertices associated with edges.
type PipeVertexQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The edge query to build off of.
	Inner *EdgeQuery `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// Whether to get outbound or inbound vertices on the edges.
	Direction EdgeDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=indradb.EdgeDirection" json:"direction,omitempty"`
	// Limits the number of vertices to get.
	Limit uint32 `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Filters the type of vertices returned.
	T *Identifier `protobuf:"bytes,4,opt,name=t,proto3" json:"t,omitempty"`
}

func (x *PipeVertexQuery) Reset() {
	*x = PipeVertexQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipeVertexQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipeVertexQuery) ProtoMessage() {}

func (x *PipeVertexQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipeVertexQuery.ProtoReflect.Descriptor instead.
func (*PipeVertexQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{9}
}

func (x *PipeVertexQuery) GetInner() *EdgeQuery {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PipeVertexQuery) GetDirection() EdgeDirection {
	if x != nil {
		return x.Direction
	}
	return EdgeDirection_OUTBOUND
}

func (x *PipeVertexQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *PipeVertexQuery) GetT() *Identifier {
	if x != nil {
		return x.T
	}
	return nil
}

// Gets property values associated with vertices.
type VertexPropertyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vertex query to build off of.
	Inner *VertexQuery `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// The name of the property to get.
	Name *Identifier `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *VertexPropertyQuery) Reset() {
	*x = VertexPropertyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertexPropertyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertexPropertyQuery) ProtoMessage() {}

func (x *VertexPropertyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertexPropertyQuery.ProtoReflect.Descriptor instead.
func (*VertexPropertyQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{10}
}

func (x *VertexPropertyQuery) GetInner() *VertexQuery {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *VertexPropertyQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

// Gets vertices with a property.
type PropertyPresenceVertexQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the property.
	Name *Identifier `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PropertyPresenceVertexQuery) Reset() {
	*x = PropertyPresenceVertexQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyPresenceVertexQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyPresenceVertexQuery) ProtoMessage() {}

func (x *PropertyPresenceVertexQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyPresenceVertexQuery.ProtoReflect.Descriptor instead.
func (*PropertyPresenceVertexQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{11}
}

func (x *PropertyPresenceVertexQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

// Gets vertices with a property equal to a given value.
type PropertyValueVertexQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the property.
	Name *Identifier `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the property.
	Value *Json `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PropertyValueVertexQuery) Reset() {
	*x = PropertyValueVertexQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueVertexQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueVertexQuery) ProtoMessage() {}

func (x *PropertyValueVertexQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueVertexQuery.ProtoReflect.Descriptor instead.
func (*PropertyValueVertexQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{12}
}

func (x *PropertyValueVertexQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PropertyValueVertexQuery) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

// Gets vertices with a property.
type PipePropertyPresenceVertexQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query to filter.
	Inner *VertexQuery `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// The name of the property.
	Name *Identifier `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Whether we should look for property presence or lack thereof.
	Exists bool `protobuf:"varint,3,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *PipePropertyPresenceVertexQuery) Reset() {
	*x = PipePropertyPresenceVertexQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipePropertyPresenceVertexQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipePropertyPresenceVertexQuery) ProtoMessage() {}

func (x *PipePropertyPresenceVertexQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipePropertyPresenceVertexQuery.ProtoReflect.Descriptor instead.
func (*PipePropertyPresenceVertexQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{13}
}

func (x *PipePropertyPresenceVertexQuery) GetInner() *VertexQuery {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PipePropertyPresenceVertexQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PipePropertyPresenceVertexQuery) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// Gets vertices with a property equal to a given value.
type PipePropertyValueVertexQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query to filter.
	Inner *VertexQuery `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// The name of the property.
	Name *Identifier `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the property.
	Value *Json `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Whether we should look for property equality or non-equality.
	Equal bool `protobuf:"varint,4,opt,name=equal,proto3" json:"equal,omitempty"`
}

func (x *PipePropertyValueVertexQuery) Reset() {
	*x = PipePropertyValueVertexQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipePropertyValueVertexQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipePropertyValueVertexQuery) ProtoMessage() {}

func (x *PipePropertyValueVertexQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipePropertyValueVertexQuery.ProtoReflect.Descriptor instead.
func (*PipePropertyValueVertexQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{14}
}

func (x *PipePropertyValueVertexQuery) GetInner() *VertexQuery {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PipePropertyValueVertexQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PipePropertyValueVertexQuery) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PipePropertyValueVertexQuery) GetEqual() bool {
	if x != nil {
		return x.Equal
	}
	return false
}

// A query for edges.
type EdgeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Query:
	//	*EdgeQuery_Specific
	//	*EdgeQuery_Pipe
	//	*EdgeQuery_PropertyPresence
	//	*EdgeQuery_PropertyValue
	//	*EdgeQuery_PipePropertyPresence
	//	*EdgeQuery_PipePropertyValue
	Query isEdgeQuery_Query `protobuf_oneof:"query"`
}

func (x *EdgeQuery) Reset() {
	*x = EdgeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeQuery) ProtoMessage() {}

func (x *EdgeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeQuery.ProtoReflect.Descriptor instead.
func (*EdgeQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{15}
}

func (m *EdgeQuery) GetQuery() isEdgeQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (x *EdgeQuery) GetSpecific() *SpecificEdgeQuery {
	if x, ok := x.GetQuery().(*EdgeQuery_Specific); ok {
		return x.Specific
	}
	return nil
}

func (x *EdgeQuery) GetPipe() *PipeEdgeQuery {
	if x, ok := x.GetQuery().(*EdgeQuery_Pipe); ok {
		return x.Pipe
	}
	return nil
}

func (x *EdgeQuery) GetPropertyPresence() *PropertyPresenceEdgeQuery {
	if x, ok := x.GetQuery().(*EdgeQuery_PropertyPresence); ok {
		return x.PropertyPresence
	}
	return nil
}

func (x *EdgeQuery) GetPropertyValue() *PropertyValueEdgeQuery {
	if x, ok := x.GetQuery().(*EdgeQuery_PropertyValue); ok {
		return x.PropertyValue
	}
	return nil
}

func (x *EdgeQuery) GetPipePropertyPresence() *PipePropertyPresenceEdgeQuery {
	if x, ok := x.GetQuery().(*EdgeQuery_PipePropertyPresence); ok {
		return x.PipePropertyPresence
	}
	return nil
}

func (x *EdgeQuery) GetPipePropertyValue() *PipePropertyValueEdgeQuery {
	if x, ok := x.GetQuery().(*EdgeQuery_PipePropertyValue); ok {
		return x.PipePropertyValue
	}
	return nil
}

type isEdgeQuery_Query interface {
	isEdgeQuery_Query()
}

type EdgeQuery_Specific struct {
	Specific *SpecificEdgeQuery `protobuf:"bytes,1,opt,name=specific,proto3,oneof"`
}

type EdgeQuery_Pipe struct {
	Pipe *PipeEdgeQuery `protobuf:"bytes,2,opt,name=pipe,proto3,oneof"`
}

type EdgeQuery_PropertyPresence struct {
	PropertyPresence *PropertyPresenceEdgeQuery `protobuf:"bytes,3,opt,name=property_presence,json=propertyPresence,proto3,oneof"`
}

type EdgeQuery_PropertyValue struct {
	PropertyValue *PropertyValueEdgeQuery `protobuf:"bytes,4,opt,name=property_value,json=propertyValue,proto3,oneof"`
}

type EdgeQuery_PipePropertyPresence struct {
	PipePropertyPresence *PipePropertyPresenceEdgeQuery `protobuf:"bytes,5,opt,name=pipe_property_presence,json=pipePropertyPresence,proto3,oneof"`
}

type EdgeQuery_PipePropertyValue struct {
	PipePropertyValue *PipePropertyValueEdgeQuery `protobuf:"bytes,6,opt,name=pipe_property_value,json=pipePropertyValue,proto3,oneof"`
}

func (*EdgeQuery_Specific) isEdgeQuery_Query() {}

func (*EdgeQuery_Pipe) isEdgeQuery_Query() {}

func (*EdgeQuery_PropertyPresence) isEdgeQuery_Query() {}

func (*EdgeQuery_PropertyValue) isEdgeQuery_Query() {}

func (*EdgeQuery_PipePropertyPresence) isEdgeQuery_Query() {}

func (*EdgeQuery_PipePropertyValue) isEdgeQuery_Query() {}

// Gets a specific set of edges.
type SpecificEdgeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The keys of the edges to get.
	Keys []*EdgeKey `protobuf:"bytes,1,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *SpecificEdgeQuery) Reset() {
	*x = SpecificEdgeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpecificEdgeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpecificEdgeQuery) ProtoMessage() {}

func (x *SpecificEdgeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpecificEdgeQuery.ProtoReflect.Descriptor instead.
func (*SpecificEdgeQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{16}
}

func (x *SpecificEdgeQuery) GetKeys() []*EdgeKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

// Gets edges with a property.
type PropertyPresenceEdgeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the property.
	Name *Identifier `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *PropertyPresenceEdgeQuery) Reset() {
	*x = PropertyPresenceEdgeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyPresenceEdgeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyPresenceEdgeQuery) ProtoMessage() {}

func (x *PropertyPresenceEdgeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyPresenceEdgeQuery.ProtoReflect.Descriptor instead.
func (*PropertyPresenceEdgeQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{17}
}

func (x *PropertyPresenceEdgeQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

// Gets edges with a property equal to a given value.
type PropertyValueEdgeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the property.
	Name *Identifier `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the property.
	Value *Json `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *PropertyValueEdgeQuery) Reset() {
	*x = PropertyValueEdgeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PropertyValueEdgeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PropertyValueEdgeQuery) ProtoMessage() {}

func (x *PropertyValueEdgeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PropertyValueEdgeQuery.ProtoReflect.Descriptor instead.
func (*PropertyValueEdgeQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{18}
}

func (x *PropertyValueEdgeQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PropertyValueEdgeQuery) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

// Gets edges with a property.
type PipePropertyPresenceEdgeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query to filter.
	Inner *EdgeQuery `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// The name of the property.
	Name *Identifier `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Whether we should look for property presence or lack thereof.
	Exists bool `protobuf:"varint,3,opt,name=exists,proto3" json:"exists,omitempty"`
}

func (x *PipePropertyPresenceEdgeQuery) Reset() {
	*x = PipePropertyPresenceEdgeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipePropertyPresenceEdgeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipePropertyPresenceEdgeQuery) ProtoMessage() {}

func (x *PipePropertyPresenceEdgeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipePropertyPresenceEdgeQuery.ProtoReflect.Descriptor instead.
func (*PipePropertyPresenceEdgeQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{19}
}

func (x *PipePropertyPresenceEdgeQuery) GetInner() *EdgeQuery {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PipePropertyPresenceEdgeQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PipePropertyPresenceEdgeQuery) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

// Gets edges with a property equal to a given value.
type PipePropertyValueEdgeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The query to filter.
	Inner *EdgeQuery `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// The name of the property.
	Name *Identifier `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the property.
	Value *Json `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	// Whether we should look for property equality or non-equality.
	Equal bool `protobuf:"varint,4,opt,name=equal,proto3" json:"equal,omitempty"`
}

func (x *PipePropertyValueEdgeQuery) Reset() {
	*x = PipePropertyValueEdgeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipePropertyValueEdgeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipePropertyValueEdgeQuery) ProtoMessage() {}

func (x *PipePropertyValueEdgeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipePropertyValueEdgeQuery.ProtoReflect.Descriptor instead.
func (*PipePropertyValueEdgeQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{20}
}

func (x *PipePropertyValueEdgeQuery) GetInner() *EdgeQuery {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PipePropertyValueEdgeQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *PipePropertyValueEdgeQuery) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PipePropertyValueEdgeQuery) GetEqual() bool {
	if x != nil {
		return x.Equal
	}
	return false
}

// Gets the edges associated with vertices.
type PipeEdgeQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vertex query to build off of.
	Inner *VertexQuery `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// Whether to get outbound or inbound edges on the vertices.
	Direction EdgeDirection `protobuf:"varint,2,opt,name=direction,proto3,enum=indradb.EdgeDirection" json:"direction,omitempty"`
	// Filters the type of edges returned.
	T *Identifier `protobuf:"bytes,3,opt,name=t,proto3" json:"t,omitempty"`
	// Specifies the newest update datetime for returned edges.
	High *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=high,proto3" json:"high,omitempty"`
	// Specifies the oldest update datetime for returned edges.
	Low *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=low,proto3" json:"low,omitempty"`
	// Limits the number of edges to get.
	Limit uint32 `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (x *PipeEdgeQuery) Reset() {
	*x = PipeEdgeQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PipeEdgeQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PipeEdgeQuery) ProtoMessage() {}

func (x *PipeEdgeQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PipeEdgeQuery.ProtoReflect.Descriptor instead.
func (*PipeEdgeQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{21}
}

func (x *PipeEdgeQuery) GetInner() *VertexQuery {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *PipeEdgeQuery) GetDirection() EdgeDirection {
	if x != nil {
		return x.Direction
	}
	return EdgeDirection_OUTBOUND
}

func (x *PipeEdgeQuery) GetT() *Identifier {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *PipeEdgeQuery) GetHigh() *timestamppb.Timestamp {
	if x != nil {
		return x.High
	}
	return nil
}

func (x *PipeEdgeQuery) GetLow() *timestamppb.Timestamp {
	if x != nil {
		return x.Low
	}
	return nil
}

func (x *PipeEdgeQuery) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

// Gets property values associated with edges.
type EdgePropertyQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The edge query to build off of.
	Inner *EdgeQuery `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	// The name of the property to get.
	Name *Identifier `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *EdgePropertyQuery) Reset() {
	*x = EdgePropertyQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgePropertyQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgePropertyQuery) ProtoMessage() {}

func (x *EdgePropertyQuery) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgePropertyQuery.ProtoReflect.Descriptor instead.
func (*EdgePropertyQuery) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{22}
}

func (x *EdgePropertyQuery) GetInner() *EdgeQuery {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *EdgePropertyQuery) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

// A property.
type NamedProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the vertex.
	Name *Identifier `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The property value.
	Value *Json `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NamedProperty) Reset() {
	*x = NamedProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedProperty) ProtoMessage() {}

func (x *NamedProperty) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedProperty.ProtoReflect.Descriptor instead.
func (*NamedProperty) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{23}
}

func (x *NamedProperty) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NamedProperty) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

// Represents a vertex property.
type VertexProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The id of the vertex.
	Id *Uuid `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The property value.
	Value *Json `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VertexProperty) Reset() {
	*x = VertexProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertexProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertexProperty) ProtoMessage() {}

func (x *VertexProperty) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertexProperty.ProtoReflect.Descriptor instead.
func (*VertexProperty) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{24}
}

func (x *VertexProperty) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VertexProperty) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

// A vertex with properties.
type VertexProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vertex.
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,proto3" json:"vertex,omitempty"`
	// All of the vertex's properties.
	Props []*NamedProperty `protobuf:"bytes,2,rep,name=props,proto3" json:"props,omitempty"`
}

func (x *VertexProperties) Reset() {
	*x = VertexProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertexProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertexProperties) ProtoMessage() {}

func (x *VertexProperties) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertexProperties.ProtoReflect.Descriptor instead.
func (*VertexProperties) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{25}
}

func (x *VertexProperties) GetVertex() *Vertex {
	if x != nil {
		return x.Vertex
	}
	return nil
}

func (x *VertexProperties) GetProps() []*NamedProperty {
	if x != nil {
		return x.Props
	}
	return nil
}

// Represents an edge property.
type EdgeProperty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The key to the edge.
	Key *EdgeKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// The property value.
	Value *Json `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EdgeProperty) Reset() {
	*x = EdgeProperty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeProperty) ProtoMessage() {}

func (x *EdgeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeProperty.ProtoReflect.Descriptor instead.
func (*EdgeProperty) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{26}
}

func (x *EdgeProperty) GetKey() *EdgeKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EdgeProperty) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

// An edge with properties.
type EdgeProperties struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The edge.
	Edge *Edge `protobuf:"bytes,1,opt,name=edge,proto3" json:"edge,omitempty"`
	// All of the edge's properties.
	Props []*NamedProperty `protobuf:"bytes,2,rep,name=props,proto3" json:"props,omitempty"`
}

func (x *EdgeProperties) Reset() {
	*x = EdgeProperties{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgeProperties) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgeProperties) ProtoMessage() {}

func (x *EdgeProperties) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgeProperties.ProtoReflect.Descriptor instead.
func (*EdgeProperties) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{27}
}

func (x *EdgeProperties) GetEdge() *Edge {
	if x != nil {
		return x.Edge
	}
	return nil
}

func (x *EdgeProperties) GetProps() []*NamedProperty {
	if x != nil {
		return x.Props
	}
	return nil
}

// An item to insert, as part of a bulk insert request.
type BulkInsertItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Item:
	//	*BulkInsertItem_Vertex
	//	*BulkInsertItem_Edge
	//	*BulkInsertItem_VertexProperty
	//	*BulkInsertItem_EdgeProperty
	Item isBulkInsertItem_Item `protobuf_oneof:"item"`
}

func (x *BulkInsertItem) Reset() {
	*x = BulkInsertItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BulkInsertItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BulkInsertItem) ProtoMessage() {}

func (x *BulkInsertItem) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BulkInsertItem.ProtoReflect.Descriptor instead.
func (*BulkInsertItem) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{28}
}

func (m *BulkInsertItem) GetItem() isBulkInsertItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *BulkInsertItem) GetVertex() *Vertex {
	if x, ok := x.GetItem().(*BulkInsertItem_Vertex); ok {
		return x.Vertex
	}
	return nil
}

func (x *BulkInsertItem) GetEdge() *EdgeKey {
	if x, ok := x.GetItem().(*BulkInsertItem_Edge); ok {
		return x.Edge
	}
	return nil
}

func (x *BulkInsertItem) GetVertexProperty() *VertexPropertyBulkInsertItem {
	if x, ok := x.GetItem().(*BulkInsertItem_VertexProperty); ok {
		return x.VertexProperty
	}
	return nil
}

func (x *BulkInsertItem) GetEdgeProperty() *EdgePropertyBulkInsertItem {
	if x, ok := x.GetItem().(*BulkInsertItem_EdgeProperty); ok {
		return x.EdgeProperty
	}
	return nil
}

type isBulkInsertItem_Item interface {
	isBulkInsertItem_Item()
}

type BulkInsertItem_Vertex struct {
	Vertex *Vertex `protobuf:"bytes,1,opt,name=vertex,proto3,oneof"`
}

type BulkInsertItem_Edge struct {
	Edge *EdgeKey `protobuf:"bytes,2,opt,name=edge,proto3,oneof"`
}

type BulkInsertItem_VertexProperty struct {
	VertexProperty *VertexPropertyBulkInsertItem `protobuf:"bytes,3,opt,name=vertex_property,json=vertexProperty,proto3,oneof"`
}

type BulkInsertItem_EdgeProperty struct {
	EdgeProperty *EdgePropertyBulkInsertItem `protobuf:"bytes,4,opt,name=edge_property,json=edgeProperty,proto3,oneof"`
}

func (*BulkInsertItem_Vertex) isBulkInsertItem_Item() {}

func (*BulkInsertItem_Edge) isBulkInsertItem_Item() {}

func (*BulkInsertItem_VertexProperty) isBulkInsertItem_Item() {}

func (*BulkInsertItem_EdgeProperty) isBulkInsertItem_Item() {}

// A vertex property to insert.
type VertexPropertyBulkInsertItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    *Uuid       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  *Identifier `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Value *Json       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VertexPropertyBulkInsertItem) Reset() {
	*x = VertexPropertyBulkInsertItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VertexPropertyBulkInsertItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VertexPropertyBulkInsertItem) ProtoMessage() {}

func (x *VertexPropertyBulkInsertItem) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VertexPropertyBulkInsertItem.ProtoReflect.Descriptor instead.
func (*VertexPropertyBulkInsertItem) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{29}
}

func (x *VertexPropertyBulkInsertItem) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *VertexPropertyBulkInsertItem) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VertexPropertyBulkInsertItem) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

// An edge property to insert.
type EdgePropertyBulkInsertItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *EdgeKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name  *Identifier `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Value *Json       `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EdgePropertyBulkInsertItem) Reset() {
	*x = EdgePropertyBulkInsertItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EdgePropertyBulkInsertItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EdgePropertyBulkInsertItem) ProtoMessage() {}

func (x *EdgePropertyBulkInsertItem) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EdgePropertyBulkInsertItem.ProtoReflect.Descriptor instead.
func (*EdgePropertyBulkInsertItem) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{30}
}

func (x *EdgePropertyBulkInsertItem) GetKey() *EdgeKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *EdgePropertyBulkInsertItem) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *EdgePropertyBulkInsertItem) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

// A request to index a property.
type IndexPropertyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name *Identifier `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *IndexPropertyRequest) Reset() {
	*x = IndexPropertyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexPropertyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexPropertyRequest) ProtoMessage() {}

func (x *IndexPropertyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexPropertyRequest.ProtoReflect.Descriptor instead.
func (*IndexPropertyRequest) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{31}
}

func (x *IndexPropertyRequest) GetName() *Identifier {
	if x != nil {
		return x.Name
	}
	return nil
}

type GetEdgeCountRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        *Uuid         `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	T         *Identifier   `protobuf:"bytes,2,opt,name=t,proto3" json:"t,omitempty"`
	Direction EdgeDirection `protobuf:"varint,3,opt,name=direction,proto3,enum=indradb.EdgeDirection" json:"direction,omitempty"`
}

func (x *GetEdgeCountRequest) Reset() {
	*x = GetEdgeCountRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEdgeCountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEdgeCountRequest) ProtoMessage() {}

func (x *GetEdgeCountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEdgeCountRequest.ProtoReflect.Descriptor instead.
func (*GetEdgeCountRequest) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{32}
}

func (x *GetEdgeCountRequest) GetId() *Uuid {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *GetEdgeCountRequest) GetT() *Identifier {
	if x != nil {
		return x.T
	}
	return nil
}

func (x *GetEdgeCountRequest) GetDirection() EdgeDirection {
	if x != nil {
		return x.Direction
	}
	return EdgeDirection_OUTBOUND
}

type SetVertexPropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q     *VertexPropertyQuery `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Value *Json                `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetVertexPropertiesRequest) Reset() {
	*x = SetVertexPropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVertexPropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVertexPropertiesRequest) ProtoMessage() {}

func (x *SetVertexPropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVertexPropertiesRequest.ProtoReflect.Descriptor instead.
func (*SetVertexPropertiesRequest) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{33}
}

func (x *SetVertexPropertiesRequest) GetQ() *VertexPropertyQuery {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *SetVertexPropertiesRequest) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

type SetEdgePropertiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Q     *EdgePropertyQuery `protobuf:"bytes,1,opt,name=q,proto3" json:"q,omitempty"`
	Value *Json              `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SetEdgePropertiesRequest) Reset() {
	*x = SetEdgePropertiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetEdgePropertiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetEdgePropertiesRequest) ProtoMessage() {}

func (x *SetEdgePropertiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetEdgePropertiesRequest.ProtoReflect.Descriptor instead.
func (*SetEdgePropertiesRequest) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{34}
}

func (x *SetEdgePropertiesRequest) GetQ() *EdgePropertyQuery {
	if x != nil {
		return x.Q
	}
	return nil
}

func (x *SetEdgePropertiesRequest) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

type CreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Created bool `protobuf:"varint,1,opt,name=created,proto3" json:"created,omitempty"`
}

func (x *CreateResponse) Reset() {
	*x = CreateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateResponse) ProtoMessage() {}

func (x *CreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateResponse.ProtoReflect.Descriptor instead.
func (*CreateResponse) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{35}
}

func (x *CreateResponse) GetCreated() bool {
	if x != nil {
		return x.Created
	}
	return false
}

type CountResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *CountResponse) Reset() {
	*x = CountResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountResponse) ProtoMessage() {}

func (x *CountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountResponse.ProtoReflect.Descriptor instead.
func (*CountResponse) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{36}
}

func (x *CountResponse) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

// A request to execute a plugin.
type ExecutePluginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Arg  *Json  `protobuf:"bytes,2,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *ExecutePluginRequest) Reset() {
	*x = ExecutePluginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePluginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePluginRequest) ProtoMessage() {}

func (x *ExecutePluginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePluginRequest.ProtoReflect.Descriptor instead.
func (*ExecutePluginRequest) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{37}
}

func (x *ExecutePluginRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExecutePluginRequest) GetArg() *Json {
	if x != nil {
		return x.Arg
	}
	return nil
}

// A response to a plugin execution.
type ExecutePluginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value *Json `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ExecutePluginResponse) Reset() {
	*x = ExecutePluginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_citygraph_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutePluginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutePluginResponse) ProtoMessage() {}

func (x *ExecutePluginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_citygraph_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutePluginResponse.ProtoReflect.Descriptor instead.
func (*ExecutePluginResponse) Descriptor() ([]byte, []int) {
	return file_citygraph_proto_rawDescGZIP(), []int{38}
}

func (x *ExecutePluginResponse) GetValue() *Json {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_citygraph_proto protoreflect.FileDescriptor

var file_citygraph_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x69, 0x74, 0x79, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x07, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x1c, 0x0a, 0x04, 0x4a, 0x73,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x71, 0x0a, 0x04, 0x45, 0x64, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x10, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x07,
	0x45, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x62, 0x6f,
	0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x0a, 0x6f, 0x75, 0x74,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x01, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x01, 0x74, 0x12, 0x2c, 0x0a, 0x0a, 0x69, 0x6e,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x09, 0x69,
	0x6e, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49, 0x64, 0x22, 0x4a, 0x0a, 0x06, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x21, 0x0a, 0x01, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x01, 0x74, 0x22, 0x91, 0x04, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69, 0x6e, 0x64, 0x72,
	0x61, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x66, 0x69, 0x63, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x69, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x69, 0x70, 0x65,
	0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x69, 0x70, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x60, 0x0a, 0x16, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50,
	0x69, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00,
	0x52, 0x14, 0x70, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x13, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x11, 0x70, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42,
	0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x75, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x21, 0x0a, 0x01, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x01, 0x74, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64,
	0x62, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x22,
	0x36, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x56, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x55, 0x75,
	0x69, 0x64, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x0f, 0x50, 0x69, 0x70, 0x65,
	0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x21, 0x0a, 0x01, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x01, 0x74, 0x22, 0x70, 0x0a, 0x13, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x46, 0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x68,
	0x0a, 0x18, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x50, 0x69, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63,
	0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e,
	0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x73, 0x74, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1c, 0x50, 0x69,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x56,
	0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x64, 0x72,
	0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x22, 0xd0, 0x03, 0x0a, 0x09, 0x45,
	0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x66, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x64, 0x67,
	0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66,
	0x69, 0x63, 0x12, 0x2c, 0x0a, 0x04, 0x70, 0x69, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x45,
	0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x04, 0x70, 0x69, 0x70, 0x65,
	0x12, 0x51, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x70, 0x72, 0x65,
	0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x69, 0x6e,
	0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x72,
	0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x69, 0x6e,
	0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0d,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e, 0x0a,
	0x16, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x70,
	0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x48, 0x00, 0x52, 0x14, 0x70, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x55, 0x0a,
	0x13, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x50, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x48,
	0x00, 0x52, 0x11, 0x70, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x22, 0x39, 0x0a,
	0x11, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x24, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4b,
	0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0x44, 0x0a, 0x19, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45, 0x64, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x66,
	0x0a, 0x16, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x50, 0x69, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x63, 0x65, 0x45,
	0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64,
	0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x22, 0xaa, 0x01, 0x0a, 0x1a, 0x50, 0x69, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x71,
	0x75, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x22, 0x88, 0x02, 0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x34,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x01, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x01, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x2c, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x6c, 0x0a, 0x11, 0x45,
	0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x28, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x63, 0x0a, 0x0d, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x54,
	0x0a, 0x0e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x69, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x76, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x52, 0x06, 0x76, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x12, 0x2c, 0x0a, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22,
	0x57, 0x0a, 0x0c, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x22, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x61, 0x0a, 0x0e, 0x45, 0x64, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x04, 0x65, 0x64,
	0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x52, 0x04, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x50, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x52, 0x05, 0x70, 0x72, 0x6f, 0x70, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0e,
	0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x29,
	0x0a, 0x06, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x48,
	0x00, 0x52, 0x06, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x04, 0x65, 0x64, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64,
	0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x04, 0x65, 0x64, 0x67,
	0x65, 0x12, 0x50, 0x0a, 0x0f, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65,
	0x6d, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70,
	0x65, 0x72, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74,
	0x79, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x48,
	0x00, 0x52, 0x0c, 0x65, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42,
	0x06, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x74,
	0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x55,
	0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x94, 0x01, 0x0a, 0x1a,
	0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x42, 0x75, 0x6c, 0x6b,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x22, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64,
	0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x22, 0x3f, 0x0a, 0x14, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64,
	0x62, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x01, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x01, 0x74, 0x12, 0x34, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x6d, 0x0a, 0x1a, 0x53, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2a, 0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x01, 0x71, 0x12, 0x23, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x69, 0x0a, 0x18, 0x53, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x01, 0x71, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x69, 0x6e, 0x64, 0x72,
	0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x01, 0x71, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64,
	0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2a, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0x25, 0x0a, 0x0d, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x4b, 0x0a, 0x14, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x03,
	0x61, 0x72, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72,
	0x61, 0x64, 0x62, 0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x03, 0x61, 0x72, 0x67, 0x22, 0x3c, 0x0a,
	0x15, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x2a, 0x0a, 0x0d, 0x45,
	0x64, 0x67, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e,
	0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x32, 0xdb, 0x0b, 0x0a, 0x07, 0x49, 0x6e, 0x64, 0x72,
	0x61, 0x44, 0x42, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x36, 0x0a, 0x04, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72,
	0x74, 0x65, 0x78, 0x12, 0x0f, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a,
	0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x1a, 0x0d, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x36, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x74, 0x69, 0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0f,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x30,
	0x01, 0x12, 0x3e, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x69,
	0x63, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x40, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x69, 0x6e,
	0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x64, 0x67,
	0x65, 0x12, 0x10, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x4b, 0x65, 0x79, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x0d, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x30, 0x01, 0x12, 0x39, 0x0a,
	0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x73, 0x12, 0x12, 0x2e, 0x69,
	0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x44, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x45,
	0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62,
	0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e,
	0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x30, 0x01, 0x12, 0x4b,
	0x0a, 0x16, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x14, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61,
	0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x19,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x30, 0x01, 0x12, 0x52, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x65, 0x73, 0x12, 0x23, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x74,
	0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x4e, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x64, 0x72,
	0x61, 0x64, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x74, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x48, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45,
	0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x1a, 0x15, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x30, 0x01, 0x12, 0x4e, 0x0a, 0x11, 0x53, 0x65, 0x74,
	0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x21,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x64, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x14, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x45, 0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x1a, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x45,
	0x64, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x12, 0x2e,
	0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x1a, 0x17, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x45, 0x64, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x30, 0x01, 0x12, 0x3f, 0x0a, 0x0a,
	0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x64,
	0x72, 0x61, 0x64, 0x62, 0x2e, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x49,
	0x74, 0x65, 0x6d, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x46, 0x0a,
	0x0d, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x1d,
	0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4e, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x64, 0x72, 0x61, 0x64, 0x62, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x0e, 0x5a, 0x0c, 0x63, 0x69, 0x74, 0x79, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_citygraph_proto_rawDescOnce sync.Once
	file_citygraph_proto_rawDescData = file_citygraph_proto_rawDesc
)

func file_citygraph_proto_rawDescGZIP() []byte {
	file_citygraph_proto_rawDescOnce.Do(func() {
		file_citygraph_proto_rawDescData = protoimpl.X.CompressGZIP(file_citygraph_proto_rawDescData)
	})
	return file_citygraph_proto_rawDescData
}

var file_citygraph_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_citygraph_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_citygraph_proto_goTypes = []interface{}{
	(EdgeDirection)(0),                      // 0: indradb.EdgeDirection
	(*Uuid)(nil),                            // 1: indradb.Uuid
	(*Identifier)(nil),                      // 2: indradb.Identifier
	(*Json)(nil),                            // 3: indradb.Json
	(*Edge)(nil),                            // 4: indradb.Edge
	(*EdgeKey)(nil),                         // 5: indradb.EdgeKey
	(*Vertex)(nil),                          // 6: indradb.Vertex
	(*VertexQuery)(nil),                     // 7: indradb.VertexQuery
	(*RangeVertexQuery)(nil),                // 8: indradb.RangeVertexQuery
	(*SpecificVertexQuery)(nil),             // 9: indradb.SpecificVertexQuery
	(*PipeVertexQuery)(nil),                 // 10: indradb.PipeVertexQuery
	(*VertexPropertyQuery)(nil),             // 11: indradb.VertexPropertyQuery
	(*PropertyPresenceVertexQuery)(nil),     // 12: indradb.PropertyPresenceVertexQuery
	(*PropertyValueVertexQuery)(nil),        // 13: indradb.PropertyValueVertexQuery
	(*PipePropertyPresenceVertexQuery)(nil), // 14: indradb.PipePropertyPresenceVertexQuery
	(*PipePropertyValueVertexQuery)(nil),    // 15: indradb.PipePropertyValueVertexQuery
	(*EdgeQuery)(nil),                       // 16: indradb.EdgeQuery
	(*SpecificEdgeQuery)(nil),               // 17: indradb.SpecificEdgeQuery
	(*PropertyPresenceEdgeQuery)(nil),       // 18: indradb.PropertyPresenceEdgeQuery
	(*PropertyValueEdgeQuery)(nil),          // 19: indradb.PropertyValueEdgeQuery
	(*PipePropertyPresenceEdgeQuery)(nil),   // 20: indradb.PipePropertyPresenceEdgeQuery
	(*PipePropertyValueEdgeQuery)(nil),      // 21: indradb.PipePropertyValueEdgeQuery
	(*PipeEdgeQuery)(nil),                   // 22: indradb.PipeEdgeQuery
	(*EdgePropertyQuery)(nil),               // 23: indradb.EdgePropertyQuery
	(*NamedProperty)(nil),                   // 24: indradb.NamedProperty
	(*VertexProperty)(nil),                  // 25: indradb.VertexProperty
	(*VertexProperties)(nil),                // 26: indradb.VertexProperties
	(*EdgeProperty)(nil),                    // 27: indradb.EdgeProperty
	(*EdgeProperties)(nil),                  // 28: indradb.EdgeProperties
	(*BulkInsertItem)(nil),                  // 29: indradb.BulkInsertItem
	(*VertexPropertyBulkInsertItem)(nil),    // 30: indradb.VertexPropertyBulkInsertItem
	(*EdgePropertyBulkInsertItem)(nil),      // 31: indradb.EdgePropertyBulkInsertItem
	(*IndexPropertyRequest)(nil),            // 32: indradb.IndexPropertyRequest
	(*GetEdgeCountRequest)(nil),             // 33: indradb.GetEdgeCountRequest
	(*SetVertexPropertiesRequest)(nil),      // 34: indradb.SetVertexPropertiesRequest
	(*SetEdgePropertiesRequest)(nil),        // 35: indradb.SetEdgePropertiesRequest
	(*CreateResponse)(nil),                  // 36: indradb.CreateResponse
	(*CountResponse)(nil),                   // 37: indradb.CountResponse
	(*ExecutePluginRequest)(nil),            // 38: indradb.ExecutePluginRequest
	(*ExecutePluginResponse)(nil),           // 39: indradb.ExecutePluginResponse
	(*timestamppb.Timestamp)(nil),           // 40: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                   // 41: google.protobuf.Empty
}
var file_citygraph_proto_depIdxs = []int32{
	5,   // 0: indradb.Edge.key:type_name -> indradb.EdgeKey
	40,  // 1: indradb.Edge.created_datetime:type_name -> google.protobuf.Timestamp
	1,   // 2: indradb.EdgeKey.outbound_id:type_name -> indradb.Uuid
	2,   // 3: indradb.EdgeKey.t:type_name -> indradb.Identifier
	1,   // 4: indradb.EdgeKey.inbound_id:type_name -> indradb.Uuid
	1,   // 5: indradb.Vertex.id:type_name -> indradb.Uuid
	2,   // 6: indradb.Vertex.t:type_name -> indradb.Identifier
	8,   // 7: indradb.VertexQuery.range:type_name -> indradb.RangeVertexQuery
	9,   // 8: indradb.VertexQuery.specific:type_name -> indradb.SpecificVertexQuery
	10,  // 9: indradb.VertexQuery.pipe:type_name -> indradb.PipeVertexQuery
	12,  // 10: indradb.VertexQuery.property_presence:type_name -> indradb.PropertyPresenceVertexQuery
	13,  // 11: indradb.VertexQuery.property_value:type_name -> indradb.PropertyValueVertexQuery
	14,  // 12: indradb.VertexQuery.pipe_property_presence:type_name -> indradb.PipePropertyPresenceVertexQuery
	15,  // 13: indradb.VertexQuery.pipe_property_value:type_name -> indradb.PipePropertyValueVertexQuery
	2,   // 14: indradb.RangeVertexQuery.t:type_name -> indradb.Identifier
	1,   // 15: indradb.RangeVertexQuery.start_id:type_name -> indradb.Uuid
	1,   // 16: indradb.SpecificVertexQuery.ids:type_name -> indradb.Uuid
	16,  // 17: indradb.PipeVertexQuery.inner:type_name -> indradb.EdgeQuery
	0,   // 18: indradb.PipeVertexQuery.direction:type_name -> indradb.EdgeDirection
	2,   // 19: indradb.PipeVertexQuery.t:type_name -> indradb.Identifier
	7,   // 20: indradb.VertexPropertyQuery.inner:type_name -> indradb.VertexQuery
	2,   // 21: indradb.VertexPropertyQuery.name:type_name -> indradb.Identifier
	2,   // 22: indradb.PropertyPresenceVertexQuery.name:type_name -> indradb.Identifier
	2,   // 23: indradb.PropertyValueVertexQuery.name:type_name -> indradb.Identifier
	3,   // 24: indradb.PropertyValueVertexQuery.value:type_name -> indradb.Json
	7,   // 25: indradb.PipePropertyPresenceVertexQuery.inner:type_name -> indradb.VertexQuery
	2,   // 26: indradb.PipePropertyPresenceVertexQuery.name:type_name -> indradb.Identifier
	7,   // 27: indradb.PipePropertyValueVertexQuery.inner:type_name -> indradb.VertexQuery
	2,   // 28: indradb.PipePropertyValueVertexQuery.name:type_name -> indradb.Identifier
	3,   // 29: indradb.PipePropertyValueVertexQuery.value:type_name -> indradb.Json
	17,  // 30: indradb.EdgeQuery.specific:type_name -> indradb.SpecificEdgeQuery
	22,  // 31: indradb.EdgeQuery.pipe:type_name -> indradb.PipeEdgeQuery
	18,  // 32: indradb.EdgeQuery.property_presence:type_name -> indradb.PropertyPresenceEdgeQuery
	19,  // 33: indradb.EdgeQuery.property_value:type_name -> indradb.PropertyValueEdgeQuery
	20,  // 34: indradb.EdgeQuery.pipe_property_presence:type_name -> indradb.PipePropertyPresenceEdgeQuery
	21,  // 35: indradb.EdgeQuery.pipe_property_value:type_name -> indradb.PipePropertyValueEdgeQuery
	5,   // 36: indradb.SpecificEdgeQuery.keys:type_name -> indradb.EdgeKey
	2,   // 37: indradb.PropertyPresenceEdgeQuery.name:type_name -> indradb.Identifier
	2,   // 38: indradb.PropertyValueEdgeQuery.name:type_name -> indradb.Identifier
	3,   // 39: indradb.PropertyValueEdgeQuery.value:type_name -> indradb.Json
	16,  // 40: indradb.PipePropertyPresenceEdgeQuery.inner:type_name -> indradb.EdgeQuery
	2,   // 41: indradb.PipePropertyPresenceEdgeQuery.name:type_name -> indradb.Identifier
	16,  // 42: indradb.PipePropertyValueEdgeQuery.inner:type_name -> indradb.EdgeQuery
	2,   // 43: indradb.PipePropertyValueEdgeQuery.name:type_name -> indradb.Identifier
	3,   // 44: indradb.PipePropertyValueEdgeQuery.value:type_name -> indradb.Json
	7,   // 45: indradb.PipeEdgeQuery.inner:type_name -> indradb.VertexQuery
	0,   // 46: indradb.PipeEdgeQuery.direction:type_name -> indradb.EdgeDirection
	2,   // 47: indradb.PipeEdgeQuery.t:type_name -> indradb.Identifier
	40,  // 48: indradb.PipeEdgeQuery.high:type_name -> google.protobuf.Timestamp
	40,  // 49: indradb.PipeEdgeQuery.low:type_name -> google.protobuf.Timestamp
	16,  // 50: indradb.EdgePropertyQuery.inner:type_name -> indradb.EdgeQuery
	2,   // 51: indradb.EdgePropertyQuery.name:type_name -> indradb.Identifier
	2,   // 52: indradb.NamedProperty.name:type_name -> indradb.Identifier
	3,   // 53: indradb.NamedProperty.value:type_name -> indradb.Json
	1,   // 54: indradb.VertexProperty.id:type_name -> indradb.Uuid
	3,   // 55: indradb.VertexProperty.value:type_name -> indradb.Json
	6,   // 56: indradb.VertexProperties.vertex:type_name -> indradb.Vertex
	24,  // 57: indradb.VertexProperties.props:type_name -> indradb.NamedProperty
	5,   // 58: indradb.EdgeProperty.key:type_name -> indradb.EdgeKey
	3,   // 59: indradb.EdgeProperty.value:type_name -> indradb.Json
	4,   // 60: indradb.EdgeProperties.edge:type_name -> indradb.Edge
	24,  // 61: indradb.EdgeProperties.props:type_name -> indradb.NamedProperty
	6,   // 62: indradb.BulkInsertItem.vertex:type_name -> indradb.Vertex
	5,   // 63: indradb.BulkInsertItem.edge:type_name -> indradb.EdgeKey
	30,  // 64: indradb.BulkInsertItem.vertex_property:type_name -> indradb.VertexPropertyBulkInsertItem
	31,  // 65: indradb.BulkInsertItem.edge_property:type_name -> indradb.EdgePropertyBulkInsertItem
	1,   // 66: indradb.VertexPropertyBulkInsertItem.id:type_name -> indradb.Uuid
	2,   // 67: indradb.VertexPropertyBulkInsertItem.name:type_name -> indradb.Identifier
	3,   // 68: indradb.VertexPropertyBulkInsertItem.value:type_name -> indradb.Json
	5,   // 69: indradb.EdgePropertyBulkInsertItem.key:type_name -> indradb.EdgeKey
	2,   // 70: indradb.EdgePropertyBulkInsertItem.name:type_name -> indradb.Identifier
	3,   // 71: indradb.EdgePropertyBulkInsertItem.value:type_name -> indradb.Json
	2,   // 72: indradb.IndexPropertyRequest.name:type_name -> indradb.Identifier
	1,   // 73: indradb.GetEdgeCountRequest.id:type_name -> indradb.Uuid
	2,   // 74: indradb.GetEdgeCountRequest.t:type_name -> indradb.Identifier
	0,   // 75: indradb.GetEdgeCountRequest.direction:type_name -> indradb.EdgeDirection
	11,  // 76: indradb.SetVertexPropertiesRequest.q:type_name -> indradb.VertexPropertyQuery
	3,   // 77: indradb.SetVertexPropertiesRequest.value:type_name -> indradb.Json
	23,  // 78: indradb.SetEdgePropertiesRequest.q:type_name -> indradb.EdgePropertyQuery
	3,   // 79: indradb.SetEdgePropertiesRequest.value:type_name -> indradb.Json
	3,   // 80: indradb.ExecutePluginRequest.arg:type_name -> indradb.Json
	3,   // 81: indradb.ExecutePluginResponse.value:type_name -> indradb.Json
	41,  // 82: indradb.IndraDB.Ping:input_type -> google.protobuf.Empty
	41,  // 83: indradb.IndraDB.Sync:input_type -> google.protobuf.Empty
	6,   // 84: indradb.IndraDB.CreateVertex:input_type -> indradb.Vertex
	2,   // 85: indradb.IndraDB.CreateVertexFromType:input_type -> indradb.Identifier
	7,   // 86: indradb.IndraDB.GetVertices:input_type -> indradb.VertexQuery
	7,   // 87: indradb.IndraDB.DeleteVertices:input_type -> indradb.VertexQuery
	41,  // 88: indradb.IndraDB.GetVertexCount:input_type -> google.protobuf.Empty
	5,   // 89: indradb.IndraDB.CreateEdge:input_type -> indradb.EdgeKey
	16,  // 90: indradb.IndraDB.GetEdges:input_type -> indradb.EdgeQuery
	16,  // 91: indradb.IndraDB.DeleteEdges:input_type -> indradb.EdgeQuery
	33,  // 92: indradb.IndraDB.GetEdgeCount:input_type -> indradb.GetEdgeCountRequest
	11,  // 93: indradb.IndraDB.GetVertexProperties:input_type -> indradb.VertexPropertyQuery
	7,   // 94: indradb.IndraDB.GetAllVertexProperties:input_type -> indradb.VertexQuery
	34,  // 95: indradb.IndraDB.SetVertexProperties:input_type -> indradb.SetVertexPropertiesRequest
	11,  // 96: indradb.IndraDB.DeleteVertexProperties:input_type -> indradb.VertexPropertyQuery
	23,  // 97: indradb.IndraDB.GetEdgeProperties:input_type -> indradb.EdgePropertyQuery
	35,  // 98: indradb.IndraDB.SetEdgeProperties:input_type -> indradb.SetEdgePropertiesRequest
	23,  // 99: indradb.IndraDB.DeleteEdgeProperties:input_type -> indradb.EdgePropertyQuery
	16,  // 100: indradb.IndraDB.GetAllEdgeProperties:input_type -> indradb.EdgeQuery
	29,  // 101: indradb.IndraDB.BulkInsert:input_type -> indradb.BulkInsertItem
	32,  // 102: indradb.IndraDB.IndexProperty:input_type -> indradb.IndexPropertyRequest
	38,  // 103: indradb.IndraDB.ExecutePlugin:input_type -> indradb.ExecutePluginRequest
	41,  // 104: indradb.IndraDB.Ping:output_type -> google.protobuf.Empty
	41,  // 105: indradb.IndraDB.Sync:output_type -> google.protobuf.Empty
	36,  // 106: indradb.IndraDB.CreateVertex:output_type -> indradb.CreateResponse
	1,   // 107: indradb.IndraDB.CreateVertexFromType:output_type -> indradb.Uuid
	6,   // 108: indradb.IndraDB.GetVertices:output_type -> indradb.Vertex
	41,  // 109: indradb.IndraDB.DeleteVertices:output_type -> google.protobuf.Empty
	37,  // 110: indradb.IndraDB.GetVertexCount:output_type -> indradb.CountResponse
	36,  // 111: indradb.IndraDB.CreateEdge:output_type -> indradb.CreateResponse
	4,   // 112: indradb.IndraDB.GetEdges:output_type -> indradb.Edge
	41,  // 113: indradb.IndraDB.DeleteEdges:output_type -> google.protobuf.Empty
	37,  // 114: indradb.IndraDB.GetEdgeCount:output_type -> indradb.CountResponse
	25,  // 115: indradb.IndraDB.GetVertexProperties:output_type -> indradb.VertexProperty
	26,  // 116: indradb.IndraDB.GetAllVertexProperties:output_type -> indradb.VertexProperties
	41,  // 117: indradb.IndraDB.SetVertexProperties:output_type -> google.protobuf.Empty
	41,  // 118: indradb.IndraDB.DeleteVertexProperties:output_type -> google.protobuf.Empty
	27,  // 119: indradb.IndraDB.GetEdgeProperties:output_type -> indradb.EdgeProperty
	41,  // 120: indradb.IndraDB.SetEdgeProperties:output_type -> google.protobuf.Empty
	41,  // 121: indradb.IndraDB.DeleteEdgeProperties:output_type -> google.protobuf.Empty
	28,  // 122: indradb.IndraDB.GetAllEdgeProperties:output_type -> indradb.EdgeProperties
	41,  // 123: indradb.IndraDB.BulkInsert:output_type -> google.protobuf.Empty
	41,  // 124: indradb.IndraDB.IndexProperty:output_type -> google.protobuf.Empty
	39,  // 125: indradb.IndraDB.ExecutePlugin:output_type -> indradb.ExecutePluginResponse
	104, // [104:126] is the sub-list for method output_type
	82,  // [82:104] is the sub-list for method input_type
	82,  // [82:82] is the sub-list for extension type_name
	82,  // [82:82] is the sub-list for extension extendee
	0,   // [0:82] is the sub-list for field type_name
}

func init() { file_citygraph_proto_init() }
func file_citygraph_proto_init() {
	if File_citygraph_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_citygraph_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uuid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Json); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Edge); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vertex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertexQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangeVertexQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificVertexQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipeVertexQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertexPropertyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyPresenceVertexQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueVertexQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipePropertyPresenceVertexQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipePropertyValueVertexQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpecificEdgeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyPresenceEdgeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PropertyValueEdgeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipePropertyPresenceEdgeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipePropertyValueEdgeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PipeEdgeQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgePropertyQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertexProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertexProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeProperty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgeProperties); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BulkInsertItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VertexPropertyBulkInsertItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EdgePropertyBulkInsertItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexPropertyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEdgeCountRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVertexPropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetEdgePropertiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePluginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_citygraph_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutePluginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_citygraph_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*VertexQuery_Range)(nil),
		(*VertexQuery_Specific)(nil),
		(*VertexQuery_Pipe)(nil),
		(*VertexQuery_PropertyPresence)(nil),
		(*VertexQuery_PropertyValue)(nil),
		(*VertexQuery_PipePropertyPresence)(nil),
		(*VertexQuery_PipePropertyValue)(nil),
	}
	file_citygraph_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*EdgeQuery_Specific)(nil),
		(*EdgeQuery_Pipe)(nil),
		(*EdgeQuery_PropertyPresence)(nil),
		(*EdgeQuery_PropertyValue)(nil),
		(*EdgeQuery_PipePropertyPresence)(nil),
		(*EdgeQuery_PipePropertyValue)(nil),
	}
	file_citygraph_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*BulkInsertItem_Vertex)(nil),
		(*BulkInsertItem_Edge)(nil),
		(*BulkInsertItem_VertexProperty)(nil),
		(*BulkInsertItem_EdgeProperty)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_citygraph_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_citygraph_proto_goTypes,
		DependencyIndexes: file_citygraph_proto_depIdxs,
		EnumInfos:         file_citygraph_proto_enumTypes,
		MessageInfos:      file_citygraph_proto_msgTypes,
	}.Build()
	File_citygraph_proto = out.File
	file_citygraph_proto_rawDesc = nil
	file_citygraph_proto_goTypes = nil
	file_citygraph_proto_depIdxs = nil
}
