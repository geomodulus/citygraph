// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IndraDBClient is the client API for IndraDB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndraDBClient interface {
	// Pings the server.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Syncs persisted content. Depending on the datastore implementation,
	// this has different meanings - including potentially being a no-op.
	Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Creates a new vertex. Returns whether the vertex was successfully
	// created - if this is false, it's because a vertex with the same UUID
	// already exists.
	CreateVertex(ctx context.Context, in *Vertex, opts ...grpc.CallOption) (*CreateResponse, error)
	// Creates a new vertex with just a type specification. As opposed to
	// `CreateVertex`, this is used when you do not want to manually specify
	// the vertex's UUID. Returns the new vertex's UUID.
	CreateVertexFromType(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Uuid, error)
	// Gets a range of vertices specified by a query.
	GetVertices(ctx context.Context, in *VertexQuery, opts ...grpc.CallOption) (IndraDB_GetVerticesClient, error)
	// Deletes existing vertices specified by a query.
	DeleteVertices(ctx context.Context, in *VertexQuery, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the number of vertices in the datastore.
	GetVertexCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error)
	// Creates a new edge. If the edge already exists, this will update it
	// with a new update datetime. Returns whether the edge was successfully
	// created - if this is false, it's because one of the specified vertices
	// is missing.
	CreateEdge(ctx context.Context, in *EdgeKey, opts ...grpc.CallOption) (*CreateResponse, error)
	// Gets a range of edges specified by a query.
	GetEdges(ctx context.Context, in *EdgeQuery, opts ...grpc.CallOption) (IndraDB_GetEdgesClient, error)
	// Deletes a set of edges specified by a query.
	DeleteEdges(ctx context.Context, in *EdgeQuery, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets the number of edges associated with a vertex.
	GetEdgeCount(ctx context.Context, in *GetEdgeCountRequest, opts ...grpc.CallOption) (*CountResponse, error)
	// Gets vertex properties.
	GetVertexProperties(ctx context.Context, in *VertexPropertyQuery, opts ...grpc.CallOption) (IndraDB_GetVertexPropertiesClient, error)
	// Gets vertexes and all properties for each vertex.
	GetAllVertexProperties(ctx context.Context, in *VertexQuery, opts ...grpc.CallOption) (IndraDB_GetAllVertexPropertiesClient, error)
	// Sets vertex properties.
	SetVertexProperties(ctx context.Context, in *SetVertexPropertiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes vertex properties.
	DeleteVertexProperties(ctx context.Context, in *VertexPropertyQuery, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets edge properties.
	GetEdgeProperties(ctx context.Context, in *EdgePropertyQuery, opts ...grpc.CallOption) (IndraDB_GetEdgePropertiesClient, error)
	// Sets edge properties.
	SetEdgeProperties(ctx context.Context, in *SetEdgePropertiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Deletes edge properties.
	DeleteEdgeProperties(ctx context.Context, in *EdgePropertyQuery, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Gets edges and all properties for each edge.
	GetAllEdgeProperties(ctx context.Context, in *EdgeQuery, opts ...grpc.CallOption) (IndraDB_GetAllEdgePropertiesClient, error)
	// Bulk inserts many vertices, edges, and/or properties.
	//
	// Note that datastores have discretion on how to approach safeguard vs
	// performance tradeoffs. In particular:
	// * If the datastore is disk-backed, it may or may not flush before
	//   returning.
	// * The datastore might not verify for correctness; e.g., it might not
	//   ensure that the relevant vertices exist before inserting an edge.
	BulkInsert(ctx context.Context, opts ...grpc.CallOption) (IndraDB_BulkInsertClient, error)
	// Enables indexing on a specified property. When indexing is enabled on a
	// property, it's possible to query on its presence and values.
	IndexProperty(ctx context.Context, in *IndexPropertyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Executes a plugin and returns back the response from the plugin.
	ExecutePlugin(ctx context.Context, in *ExecutePluginRequest, opts ...grpc.CallOption) (*ExecutePluginResponse, error)
}

type indraDBClient struct {
	cc grpc.ClientConnInterface
}

func NewIndraDBClient(cc grpc.ClientConnInterface) IndraDBClient {
	return &indraDBClient{cc}
}

func (c *indraDBClient) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) Sync(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) CreateVertex(ctx context.Context, in *Vertex, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/CreateVertex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) CreateVertexFromType(ctx context.Context, in *Identifier, opts ...grpc.CallOption) (*Uuid, error) {
	out := new(Uuid)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/CreateVertexFromType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) GetVertices(ctx context.Context, in *VertexQuery, opts ...grpc.CallOption) (IndraDB_GetVerticesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndraDB_ServiceDesc.Streams[0], "/indradb.IndraDB/GetVertices", opts...)
	if err != nil {
		return nil, err
	}
	x := &indraDBGetVerticesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndraDB_GetVerticesClient interface {
	Recv() (*Vertex, error)
	grpc.ClientStream
}

type indraDBGetVerticesClient struct {
	grpc.ClientStream
}

func (x *indraDBGetVerticesClient) Recv() (*Vertex, error) {
	m := new(Vertex)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indraDBClient) DeleteVertices(ctx context.Context, in *VertexQuery, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/DeleteVertices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) GetVertexCount(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/GetVertexCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) CreateEdge(ctx context.Context, in *EdgeKey, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/CreateEdge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) GetEdges(ctx context.Context, in *EdgeQuery, opts ...grpc.CallOption) (IndraDB_GetEdgesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndraDB_ServiceDesc.Streams[1], "/indradb.IndraDB/GetEdges", opts...)
	if err != nil {
		return nil, err
	}
	x := &indraDBGetEdgesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndraDB_GetEdgesClient interface {
	Recv() (*Edge, error)
	grpc.ClientStream
}

type indraDBGetEdgesClient struct {
	grpc.ClientStream
}

func (x *indraDBGetEdgesClient) Recv() (*Edge, error) {
	m := new(Edge)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indraDBClient) DeleteEdges(ctx context.Context, in *EdgeQuery, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/DeleteEdges", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) GetEdgeCount(ctx context.Context, in *GetEdgeCountRequest, opts ...grpc.CallOption) (*CountResponse, error) {
	out := new(CountResponse)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/GetEdgeCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) GetVertexProperties(ctx context.Context, in *VertexPropertyQuery, opts ...grpc.CallOption) (IndraDB_GetVertexPropertiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndraDB_ServiceDesc.Streams[2], "/indradb.IndraDB/GetVertexProperties", opts...)
	if err != nil {
		return nil, err
	}
	x := &indraDBGetVertexPropertiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndraDB_GetVertexPropertiesClient interface {
	Recv() (*VertexProperty, error)
	grpc.ClientStream
}

type indraDBGetVertexPropertiesClient struct {
	grpc.ClientStream
}

func (x *indraDBGetVertexPropertiesClient) Recv() (*VertexProperty, error) {
	m := new(VertexProperty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indraDBClient) GetAllVertexProperties(ctx context.Context, in *VertexQuery, opts ...grpc.CallOption) (IndraDB_GetAllVertexPropertiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndraDB_ServiceDesc.Streams[3], "/indradb.IndraDB/GetAllVertexProperties", opts...)
	if err != nil {
		return nil, err
	}
	x := &indraDBGetAllVertexPropertiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndraDB_GetAllVertexPropertiesClient interface {
	Recv() (*VertexProperties, error)
	grpc.ClientStream
}

type indraDBGetAllVertexPropertiesClient struct {
	grpc.ClientStream
}

func (x *indraDBGetAllVertexPropertiesClient) Recv() (*VertexProperties, error) {
	m := new(VertexProperties)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indraDBClient) SetVertexProperties(ctx context.Context, in *SetVertexPropertiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/SetVertexProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) DeleteVertexProperties(ctx context.Context, in *VertexPropertyQuery, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/DeleteVertexProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) GetEdgeProperties(ctx context.Context, in *EdgePropertyQuery, opts ...grpc.CallOption) (IndraDB_GetEdgePropertiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndraDB_ServiceDesc.Streams[4], "/indradb.IndraDB/GetEdgeProperties", opts...)
	if err != nil {
		return nil, err
	}
	x := &indraDBGetEdgePropertiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndraDB_GetEdgePropertiesClient interface {
	Recv() (*EdgeProperty, error)
	grpc.ClientStream
}

type indraDBGetEdgePropertiesClient struct {
	grpc.ClientStream
}

func (x *indraDBGetEdgePropertiesClient) Recv() (*EdgeProperty, error) {
	m := new(EdgeProperty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indraDBClient) SetEdgeProperties(ctx context.Context, in *SetEdgePropertiesRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/SetEdgeProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) DeleteEdgeProperties(ctx context.Context, in *EdgePropertyQuery, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/DeleteEdgeProperties", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) GetAllEdgeProperties(ctx context.Context, in *EdgeQuery, opts ...grpc.CallOption) (IndraDB_GetAllEdgePropertiesClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndraDB_ServiceDesc.Streams[5], "/indradb.IndraDB/GetAllEdgeProperties", opts...)
	if err != nil {
		return nil, err
	}
	x := &indraDBGetAllEdgePropertiesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type IndraDB_GetAllEdgePropertiesClient interface {
	Recv() (*EdgeProperties, error)
	grpc.ClientStream
}

type indraDBGetAllEdgePropertiesClient struct {
	grpc.ClientStream
}

func (x *indraDBGetAllEdgePropertiesClient) Recv() (*EdgeProperties, error) {
	m := new(EdgeProperties)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indraDBClient) BulkInsert(ctx context.Context, opts ...grpc.CallOption) (IndraDB_BulkInsertClient, error) {
	stream, err := c.cc.NewStream(ctx, &IndraDB_ServiceDesc.Streams[6], "/indradb.IndraDB/BulkInsert", opts...)
	if err != nil {
		return nil, err
	}
	x := &indraDBBulkInsertClient{stream}
	return x, nil
}

type IndraDB_BulkInsertClient interface {
	Send(*BulkInsertItem) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type indraDBBulkInsertClient struct {
	grpc.ClientStream
}

func (x *indraDBBulkInsertClient) Send(m *BulkInsertItem) error {
	return x.ClientStream.SendMsg(m)
}

func (x *indraDBBulkInsertClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *indraDBClient) IndexProperty(ctx context.Context, in *IndexPropertyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/IndexProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indraDBClient) ExecutePlugin(ctx context.Context, in *ExecutePluginRequest, opts ...grpc.CallOption) (*ExecutePluginResponse, error) {
	out := new(ExecutePluginResponse)
	err := c.cc.Invoke(ctx, "/indradb.IndraDB/ExecutePlugin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndraDBServer is the server API for IndraDB service.
// All implementations must embed UnimplementedIndraDBServer
// for forward compatibility
type IndraDBServer interface {
	// Pings the server.
	Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Syncs persisted content. Depending on the datastore implementation,
	// this has different meanings - including potentially being a no-op.
	Sync(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	// Creates a new vertex. Returns whether the vertex was successfully
	// created - if this is false, it's because a vertex with the same UUID
	// already exists.
	CreateVertex(context.Context, *Vertex) (*CreateResponse, error)
	// Creates a new vertex with just a type specification. As opposed to
	// `CreateVertex`, this is used when you do not want to manually specify
	// the vertex's UUID. Returns the new vertex's UUID.
	CreateVertexFromType(context.Context, *Identifier) (*Uuid, error)
	// Gets a range of vertices specified by a query.
	GetVertices(*VertexQuery, IndraDB_GetVerticesServer) error
	// Deletes existing vertices specified by a query.
	DeleteVertices(context.Context, *VertexQuery) (*emptypb.Empty, error)
	// Gets the number of vertices in the datastore.
	GetVertexCount(context.Context, *emptypb.Empty) (*CountResponse, error)
	// Creates a new edge. If the edge already exists, this will update it
	// with a new update datetime. Returns whether the edge was successfully
	// created - if this is false, it's because one of the specified vertices
	// is missing.
	CreateEdge(context.Context, *EdgeKey) (*CreateResponse, error)
	// Gets a range of edges specified by a query.
	GetEdges(*EdgeQuery, IndraDB_GetEdgesServer) error
	// Deletes a set of edges specified by a query.
	DeleteEdges(context.Context, *EdgeQuery) (*emptypb.Empty, error)
	// Gets the number of edges associated with a vertex.
	GetEdgeCount(context.Context, *GetEdgeCountRequest) (*CountResponse, error)
	// Gets vertex properties.
	GetVertexProperties(*VertexPropertyQuery, IndraDB_GetVertexPropertiesServer) error
	// Gets vertexes and all properties for each vertex.
	GetAllVertexProperties(*VertexQuery, IndraDB_GetAllVertexPropertiesServer) error
	// Sets vertex properties.
	SetVertexProperties(context.Context, *SetVertexPropertiesRequest) (*emptypb.Empty, error)
	// Deletes vertex properties.
	DeleteVertexProperties(context.Context, *VertexPropertyQuery) (*emptypb.Empty, error)
	// Gets edge properties.
	GetEdgeProperties(*EdgePropertyQuery, IndraDB_GetEdgePropertiesServer) error
	// Sets edge properties.
	SetEdgeProperties(context.Context, *SetEdgePropertiesRequest) (*emptypb.Empty, error)
	// Deletes edge properties.
	DeleteEdgeProperties(context.Context, *EdgePropertyQuery) (*emptypb.Empty, error)
	// Gets edges and all properties for each edge.
	GetAllEdgeProperties(*EdgeQuery, IndraDB_GetAllEdgePropertiesServer) error
	// Bulk inserts many vertices, edges, and/or properties.
	//
	// Note that datastores have discretion on how to approach safeguard vs
	// performance tradeoffs. In particular:
	// * If the datastore is disk-backed, it may or may not flush before
	//   returning.
	// * The datastore might not verify for correctness; e.g., it might not
	//   ensure that the relevant vertices exist before inserting an edge.
	BulkInsert(IndraDB_BulkInsertServer) error
	// Enables indexing on a specified property. When indexing is enabled on a
	// property, it's possible to query on its presence and values.
	IndexProperty(context.Context, *IndexPropertyRequest) (*emptypb.Empty, error)
	// Executes a plugin and returns back the response from the plugin.
	ExecutePlugin(context.Context, *ExecutePluginRequest) (*ExecutePluginResponse, error)
	mustEmbedUnimplementedIndraDBServer()
}

// UnimplementedIndraDBServer must be embedded to have forward compatible implementations.
type UnimplementedIndraDBServer struct {
}

func (UnimplementedIndraDBServer) Ping(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedIndraDBServer) Sync(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedIndraDBServer) CreateVertex(context.Context, *Vertex) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVertex not implemented")
}
func (UnimplementedIndraDBServer) CreateVertexFromType(context.Context, *Identifier) (*Uuid, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVertexFromType not implemented")
}
func (UnimplementedIndraDBServer) GetVertices(*VertexQuery, IndraDB_GetVerticesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVertices not implemented")
}
func (UnimplementedIndraDBServer) DeleteVertices(context.Context, *VertexQuery) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVertices not implemented")
}
func (UnimplementedIndraDBServer) GetVertexCount(context.Context, *emptypb.Empty) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVertexCount not implemented")
}
func (UnimplementedIndraDBServer) CreateEdge(context.Context, *EdgeKey) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEdge not implemented")
}
func (UnimplementedIndraDBServer) GetEdges(*EdgeQuery, IndraDB_GetEdgesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEdges not implemented")
}
func (UnimplementedIndraDBServer) DeleteEdges(context.Context, *EdgeQuery) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdges not implemented")
}
func (UnimplementedIndraDBServer) GetEdgeCount(context.Context, *GetEdgeCountRequest) (*CountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEdgeCount not implemented")
}
func (UnimplementedIndraDBServer) GetVertexProperties(*VertexPropertyQuery, IndraDB_GetVertexPropertiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVertexProperties not implemented")
}
func (UnimplementedIndraDBServer) GetAllVertexProperties(*VertexQuery, IndraDB_GetAllVertexPropertiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllVertexProperties not implemented")
}
func (UnimplementedIndraDBServer) SetVertexProperties(context.Context, *SetVertexPropertiesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVertexProperties not implemented")
}
func (UnimplementedIndraDBServer) DeleteVertexProperties(context.Context, *VertexPropertyQuery) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVertexProperties not implemented")
}
func (UnimplementedIndraDBServer) GetEdgeProperties(*EdgePropertyQuery, IndraDB_GetEdgePropertiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetEdgeProperties not implemented")
}
func (UnimplementedIndraDBServer) SetEdgeProperties(context.Context, *SetEdgePropertiesRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEdgeProperties not implemented")
}
func (UnimplementedIndraDBServer) DeleteEdgeProperties(context.Context, *EdgePropertyQuery) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEdgeProperties not implemented")
}
func (UnimplementedIndraDBServer) GetAllEdgeProperties(*EdgeQuery, IndraDB_GetAllEdgePropertiesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllEdgeProperties not implemented")
}
func (UnimplementedIndraDBServer) BulkInsert(IndraDB_BulkInsertServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkInsert not implemented")
}
func (UnimplementedIndraDBServer) IndexProperty(context.Context, *IndexPropertyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IndexProperty not implemented")
}
func (UnimplementedIndraDBServer) ExecutePlugin(context.Context, *ExecutePluginRequest) (*ExecutePluginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePlugin not implemented")
}
func (UnimplementedIndraDBServer) mustEmbedUnimplementedIndraDBServer() {}

// UnsafeIndraDBServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndraDBServer will
// result in compilation errors.
type UnsafeIndraDBServer interface {
	mustEmbedUnimplementedIndraDBServer()
}

func RegisterIndraDBServer(s grpc.ServiceRegistrar, srv IndraDBServer) {
	s.RegisterService(&IndraDB_ServiceDesc, srv)
}

func _IndraDB_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).Sync(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_CreateVertex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Vertex)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).CreateVertex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/CreateVertex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).CreateVertex(ctx, req.(*Vertex))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_CreateVertexFromType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Identifier)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).CreateVertexFromType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/CreateVertexFromType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).CreateVertexFromType(ctx, req.(*Identifier))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_GetVertices_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VertexQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndraDBServer).GetVertices(m, &indraDBGetVerticesServer{stream})
}

type IndraDB_GetVerticesServer interface {
	Send(*Vertex) error
	grpc.ServerStream
}

type indraDBGetVerticesServer struct {
	grpc.ServerStream
}

func (x *indraDBGetVerticesServer) Send(m *Vertex) error {
	return x.ServerStream.SendMsg(m)
}

func _IndraDB_DeleteVertices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VertexQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).DeleteVertices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/DeleteVertices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).DeleteVertices(ctx, req.(*VertexQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_GetVertexCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).GetVertexCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/GetVertexCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).GetVertexCount(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_CreateEdge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).CreateEdge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/CreateEdge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).CreateEdge(ctx, req.(*EdgeKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_GetEdges_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EdgeQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndraDBServer).GetEdges(m, &indraDBGetEdgesServer{stream})
}

type IndraDB_GetEdgesServer interface {
	Send(*Edge) error
	grpc.ServerStream
}

type indraDBGetEdgesServer struct {
	grpc.ServerStream
}

func (x *indraDBGetEdgesServer) Send(m *Edge) error {
	return x.ServerStream.SendMsg(m)
}

func _IndraDB_DeleteEdges_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgeQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).DeleteEdges(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/DeleteEdges",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).DeleteEdges(ctx, req.(*EdgeQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_GetEdgeCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEdgeCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).GetEdgeCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/GetEdgeCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).GetEdgeCount(ctx, req.(*GetEdgeCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_GetVertexProperties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VertexPropertyQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndraDBServer).GetVertexProperties(m, &indraDBGetVertexPropertiesServer{stream})
}

type IndraDB_GetVertexPropertiesServer interface {
	Send(*VertexProperty) error
	grpc.ServerStream
}

type indraDBGetVertexPropertiesServer struct {
	grpc.ServerStream
}

func (x *indraDBGetVertexPropertiesServer) Send(m *VertexProperty) error {
	return x.ServerStream.SendMsg(m)
}

func _IndraDB_GetAllVertexProperties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VertexQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndraDBServer).GetAllVertexProperties(m, &indraDBGetAllVertexPropertiesServer{stream})
}

type IndraDB_GetAllVertexPropertiesServer interface {
	Send(*VertexProperties) error
	grpc.ServerStream
}

type indraDBGetAllVertexPropertiesServer struct {
	grpc.ServerStream
}

func (x *indraDBGetAllVertexPropertiesServer) Send(m *VertexProperties) error {
	return x.ServerStream.SendMsg(m)
}

func _IndraDB_SetVertexProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVertexPropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).SetVertexProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/SetVertexProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).SetVertexProperties(ctx, req.(*SetVertexPropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_DeleteVertexProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VertexPropertyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).DeleteVertexProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/DeleteVertexProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).DeleteVertexProperties(ctx, req.(*VertexPropertyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_GetEdgeProperties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EdgePropertyQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndraDBServer).GetEdgeProperties(m, &indraDBGetEdgePropertiesServer{stream})
}

type IndraDB_GetEdgePropertiesServer interface {
	Send(*EdgeProperty) error
	grpc.ServerStream
}

type indraDBGetEdgePropertiesServer struct {
	grpc.ServerStream
}

func (x *indraDBGetEdgePropertiesServer) Send(m *EdgeProperty) error {
	return x.ServerStream.SendMsg(m)
}

func _IndraDB_SetEdgeProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEdgePropertiesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).SetEdgeProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/SetEdgeProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).SetEdgeProperties(ctx, req.(*SetEdgePropertiesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_DeleteEdgeProperties_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EdgePropertyQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).DeleteEdgeProperties(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/DeleteEdgeProperties",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).DeleteEdgeProperties(ctx, req.(*EdgePropertyQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_GetAllEdgeProperties_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EdgeQuery)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndraDBServer).GetAllEdgeProperties(m, &indraDBGetAllEdgePropertiesServer{stream})
}

type IndraDB_GetAllEdgePropertiesServer interface {
	Send(*EdgeProperties) error
	grpc.ServerStream
}

type indraDBGetAllEdgePropertiesServer struct {
	grpc.ServerStream
}

func (x *indraDBGetAllEdgePropertiesServer) Send(m *EdgeProperties) error {
	return x.ServerStream.SendMsg(m)
}

func _IndraDB_BulkInsert_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IndraDBServer).BulkInsert(&indraDBBulkInsertServer{stream})
}

type IndraDB_BulkInsertServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*BulkInsertItem, error)
	grpc.ServerStream
}

type indraDBBulkInsertServer struct {
	grpc.ServerStream
}

func (x *indraDBBulkInsertServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *indraDBBulkInsertServer) Recv() (*BulkInsertItem, error) {
	m := new(BulkInsertItem)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IndraDB_IndexProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).IndexProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/IndexProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).IndexProperty(ctx, req.(*IndexPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndraDB_ExecutePlugin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePluginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndraDBServer).ExecutePlugin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/indradb.IndraDB/ExecutePlugin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndraDBServer).ExecutePlugin(ctx, req.(*ExecutePluginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndraDB_ServiceDesc is the grpc.ServiceDesc for IndraDB service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndraDB_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indradb.IndraDB",
	HandlerType: (*IndraDBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _IndraDB_Ping_Handler,
		},
		{
			MethodName: "Sync",
			Handler:    _IndraDB_Sync_Handler,
		},
		{
			MethodName: "CreateVertex",
			Handler:    _IndraDB_CreateVertex_Handler,
		},
		{
			MethodName: "CreateVertexFromType",
			Handler:    _IndraDB_CreateVertexFromType_Handler,
		},
		{
			MethodName: "DeleteVertices",
			Handler:    _IndraDB_DeleteVertices_Handler,
		},
		{
			MethodName: "GetVertexCount",
			Handler:    _IndraDB_GetVertexCount_Handler,
		},
		{
			MethodName: "CreateEdge",
			Handler:    _IndraDB_CreateEdge_Handler,
		},
		{
			MethodName: "DeleteEdges",
			Handler:    _IndraDB_DeleteEdges_Handler,
		},
		{
			MethodName: "GetEdgeCount",
			Handler:    _IndraDB_GetEdgeCount_Handler,
		},
		{
			MethodName: "SetVertexProperties",
			Handler:    _IndraDB_SetVertexProperties_Handler,
		},
		{
			MethodName: "DeleteVertexProperties",
			Handler:    _IndraDB_DeleteVertexProperties_Handler,
		},
		{
			MethodName: "SetEdgeProperties",
			Handler:    _IndraDB_SetEdgeProperties_Handler,
		},
		{
			MethodName: "DeleteEdgeProperties",
			Handler:    _IndraDB_DeleteEdgeProperties_Handler,
		},
		{
			MethodName: "IndexProperty",
			Handler:    _IndraDB_IndexProperty_Handler,
		},
		{
			MethodName: "ExecutePlugin",
			Handler:    _IndraDB_ExecutePlugin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetVertices",
			Handler:       _IndraDB_GetVertices_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEdges",
			Handler:       _IndraDB_GetEdges_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetVertexProperties",
			Handler:       _IndraDB_GetVertexProperties_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllVertexProperties",
			Handler:       _IndraDB_GetAllVertexProperties_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetEdgeProperties",
			Handler:       _IndraDB_GetEdgeProperties_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllEdgeProperties",
			Handler:       _IndraDB_GetAllEdgeProperties_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "BulkInsert",
			Handler:       _IndraDB_BulkInsert_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "citygraph/citygraph.proto",
}
